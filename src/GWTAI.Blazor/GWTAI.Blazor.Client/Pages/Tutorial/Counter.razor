@page "/tutorial/counter"
@rendermode InteractiveServer

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<!-- Razor can typically figure out when a C# expression ends and you transition back to writing HTML.
But you can also be explicit about the beginning and ending of the expression using parens. -->
<p role="status">Current count: (@currentCount)</p>


<!-- You can specify C# event handlers for other HTML events too, like @onchange, @oninput, and so on.
Event handling methods can be synchronous or asynchronous.
You can also define event handlers inline using C# lambda expressions:
<button class="btn btn-primary" @onclick="() => currentCount++">Click me</button>
-->
<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>


<!-- Events -->
<input @onchange="InputChanged" />
<p>@message</p>


<!-- Data Binding -->
<input @bind="text" />
<button @onclick="() => text = string.Empty">Clear</button>
<p>@text</p>





@if (currentCount > 3)
{
	<p>Test Conditional render</p>
}

@code {

    private int currentCount = 0;

	string message = "";

	string text = "";


    private void IncrementCount()
    {
        currentCount++;
    }
	
	void InputChanged(ChangeEventArgs e)
	{
		message = e.Value != null ? (string)e.Value : "";
	}
}
